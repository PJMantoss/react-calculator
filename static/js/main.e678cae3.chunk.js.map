{"version":3,"sources":["serviceWorker.js","index.js","App.js","components/KeyPads.js","components/Result.js","components/Formula.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","operator","endsWithOperator","endsWithNegativeSign","props","maxDigitWarning","setState","currentVal","prevVal","state","setTimeout","handleEvaluate","includes","expression","formula","test","slice","replace","answer","Math","round","eval","toString","evaluated","handleOperators","e","value","target","handleNumbers","length","handleDecimal","initialize","currentSign","lastClicked","className","this","currentValue","decimal","evaluate","numbers","operators","src","alt","href","Component","clearStyle","background","equalsStyle","position","height","bottom","operatorStyle","KeyPads","id","onClick","style","Result","Formula"],"mappings":"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","file":"static/js/main.e678cae3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport KeyPads from './components/KeyPads.js';\nimport Result from './components/Result.js';\nimport Formula from './components/Formula.js';\nimport ReactFCCtest from 'react-fcctest';\nimport './App.scss';\n\n// variables\nconst operator = /[x/+-]/, \n    endsWithOperator = /[x+-/]$/, \n    endsWithNegativeSign = /[x/+]-$/;\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\"\n    }\n  }\n\n  maxDigitWarning = () => {\n    this.setState({\n      currentVal: \"Digit Limit Met\",\n      prevVal: this.state.currentVal\n    });\n    setTimeout(() => this.setState({\n      currentVal: this.state.prevVal\n    }), 1000)\n  }\n\n  handleEvaluate = () => {\n    if(!this.state.currentVal.includes(\"Limit\")){\n      let expression = this.state.formula;\n      while(endsWithOperator.test(expression)){\n        expression = expression.slice(0, -1);\n      }\n\n      expression = expression.replace(/x/g, \"*\").replace(/-/g, \"-\");\n      let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n      this.setState({\n        currentVal: answer.toString(),\n        formula: expression.replace(/\\*/g, \".\").replace(/-/g, \"-\") + \"=\" + answer,\n        prevVal: answer,\n        evaluated: true\n      });\n    }\n  }\n\n  handleOperators = e => {\n    if(!this.state.currentVal.includes(\"Limit\")){\n      const value = e.target.value;\n      const { formula, prevVal, evaluated } = this.state;\n      this.setState({\n        currentVal: value,\n        evaluated: false\n      });\n\n      if (evaluated){\n        this.setState({ formula: prevVal + value });\n      } else if(!endsWithOperator.test(formula)){\n        this.setState({\n          prevVal: formula,\n          formula: formula + value\n        });\n      } else if(!endsWithNegativeSign.test(formula)){\n        this.setState({\n          formula: (endsWithNegativeSign.test(formula + value) ? formula : prevVal) + value\n        })\n      } else if(value !== \"-\"){\n        this.setState({\n          formula: prevVal + value\n        });\n      }\n    }\n  }\n\n  handleNumbers = e => {\n    if(!this.state.currentVal.includes('Limit')){\n      const { currentVal, formula, evaluated } = this.state;\n      const value = e.target.value;\n      this.setState({\n        evaluated: false\n      });\n      if(currentVal.length > 21){\n        this.maxDigitWarning();\n      } else if(evaluated){\n        this.setState({\n          currentVal: value,\n          formula: value !== \"0\" ? value : \"\"\n        });\n      } else {\n        this.setState({\n          currentVal: currentVal === \"0\" || operator.test(currentVal) ? value : currentVal + value,\n          formula: currentVal === \"0\" && value === \"0\" \n          ? formula === \"\" ? value : formula \n          : /([^.0-9]0|^0)$/.test(formula) \n            ? formula.slice(0, -1) + value \n            : formula + value\n        });\n      }\n    }\n  }\n\n  handleDecimal = () => {\n    if(this.state.evaluated === true){\n      this.setState({\n        currentVal: \"0.\",\n        formula: \"0.\",\n        evaluated: false\n      })\n    } else if(!this.state.currentVal.includes(\".\") && !this.state.currentVal.includes(\"Limit\")){\n      this.setState({evaluated: false});\n      if(this.state.currentVal.length > 21){\n        this.maxDigitWarning();\n      } else if(\n        endsWithOperator.test(this.state.formula) || \n        (this.state.currentVal === \"0\" && this.state.formula === \"\")\n      ){\n        this.setState({\n          currentVal: \"0.\",\n          formula: this.state.formula + \"0.\"\n        });\n      } else {\n        this.setState({\n          currentVal: this.state.formula.match(/(-?\\d+\\.?\\d*)$/)[0] + \".\",\n          formula: this.state.formula + \".\"\n        });\n      }\n    }\n  }\n\n  initialize = () => {\n    this.setState({\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\",\n      evaluated: false\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"calculator\">\n          <Formula formula={this.state.formula.replace(/x/g, \".\")} />\n          <Result currentValue={this.state.currentVal}/>\n          <KeyPads \n              decimal={this.handleDecimal} \n              evaluate={this.handleEvaluate} \n              initialize={this.initialize} \n              numbers={this.handleNumbers} \n              operators={this.handleOperators} \n          />\n        </div>\n        <div className=\"love\">\n            <span>Made With</span>\n            <img src=\"https://img.icons8.com/dusk/64/000000/like.png\" alt=\"love\"/> \n            <span>by <a href=\"https://github.com/PJMantoss\" target=\"_blank\">Mantoss</a></span>\n        </div>\n        <ReactFCCtest />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\n\nconst clearStyle = { background: \"#ac3939\" },\n equalsStyle = {\n    background: \"#004466\",\n    position: \"absolute\",\n    height: 130,\n    bottom: 5\n  },\n  operatorStyle = { background: \"#666666\" };\n\nconst KeyPads = (props) => {\n    return (\n        <div>\n            <button \n                className=\"jumbo\" \n                id=\"clear\" \n                onClick={props.initialize} \n                style={clearStyle} \n                value=\"AC\"\n            >\n                AC\n            </button>\n\n            <button \n                id=\"divide\" \n                onClick={props.operators} \n                style={operatorStyle} \n                value=\"/\"\n            >\n                /\n            </button>\n\n            <button\n                id=\"multiply\" \n                onClick={props.operators} \n                style={operatorStyle} \n                value=\"x\"\n            >\n                x\n            </button>\n\n            <button\n                id=\"seven\" \n                onClick={props.numbers}  \n                value=\"7\"\n            >\n                7\n            </button>\n\n            <button\n                id=\"eight\" \n                onClick={props.numbers}  \n                value=\"8\"\n            >\n                8\n            </button>\n\n            <button\n                id=\"nine\" \n                onClick={props.numbers}  \n                value=\"9\"\n            >\n                9\n            </button>\n\n            <button\n                id=\"subtract\" \n                onClick={props.operators} \n                style={operatorStyle} \n                value=\"-\"\n            >\n                -\n            </button>\n\n            <button\n                id=\"four\" \n                onClick={props.numbers}  \n                value=\"4\"\n            >\n                4\n            </button>\n\n            <button\n                id=\"five\" \n                onClick={props.numbers}  \n                value=\"5\"\n            >\n                5\n            </button>\n\n            <button\n                id=\"six\" \n                onClick={props.numbers}  \n                value=\"6\"\n            >\n                6\n            </button>\n\n            <button\n                id=\"add\" \n                onClick={props.operators} \n                style={operatorStyle} \n                value=\"+\"\n            >\n                +\n            </button>\n\n            <button\n                id=\"one\" \n                onClick={props.numbers}  \n                value=\"1\"\n            >\n                1\n            </button>\n\n            <button\n                id=\"two\" \n                onClick={props.numbers}  \n                value=\"2\"\n            >\n                2\n            </button>\n\n            <button\n                id=\"three\" \n                onClick={props.numbers}  \n                value=\"3\"\n            >\n                3\n            </button>\n\n            <button\n                className=\"jumbo\"\n                id=\"zero\" \n                onClick={props.numbers}  \n                value=\"0\"\n            >\n                0\n            </button>\n\n            <button\n                id=\"decimal\" \n                onClick={props.decimal}  \n                value=\".\"\n            >\n                .\n            </button>\n\n            <button\n                id=\"equals\" \n                onClick={props.evaluate} \n                style={equalsStyle} \n                value=\"=\"\n            >\n                =\n            </button>\n        </div>\n    )\n}\n\nexport default KeyPads\n","import React from 'react'\n\nconst Result = props => {\n    return (\n        <div className=\"outputScreen\" id=\"display\">\n            {props.currentValue}\n        </div>\n    )\n}\n\nexport default Result;","import React from 'react'\n\nconst Formula = (props) => {\n    return (\n        <div className=\"formulaScreen\">\n            {props.formula}\n        </div>\n    )\n}\n\nexport default Formula;"],"sourceRoot":""}